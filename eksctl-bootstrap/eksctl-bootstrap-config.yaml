apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: reboot-private-eks
  region: ap-south-1
  version: "1.23"
  tags:
  - OwnedBy: "Saurav" 
  - ManagedBy: "eksctl"

kubernetesNetworkConfig:
  ipFamily: IPv4

iam:
  withOIDC: true
  serviceAccounts:
  # - metadata:
  #     name: s3-reader
  #     # if no namespace is set, "default" will be used;
  #     # the namespace will be created if it doesn't exist already
  #     namespace: backend-apps
  #     labels: {aws-usage: "application"}
  #   attachPolicyARNs:
  #   - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
  #   tags:
  #     Owner: "John Doe"
  #     Team: "Some Team"
  # - metadata:
  #     name: cache-access
  #     namespace: backend-apps
  #     labels: {aws-usage: "application"}
  #   attachPolicyARNs:
  #   - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
  #   - "arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess"
  # - metadata:
  #     name: cluster-autoscaler
  #     namespace: kube-system
  #     labels: {aws-usage: "cluster-ops"}
  #   wellKnownPolicies:
  #     autoScaler: true
  #   roleName: eksctl-cluster-autoscaler-role
  #   roleOnly: true

# iamIdentityMappings:
#   - arn: arn:aws:iam::000000000000:role/myAdminRole
#     groups:
#       - system:masters
#     username: admin
#     noDuplicateARNs: true # prevents shadowing of ARNs

#   - arn: arn:aws:iam::000000000000:user/myUser
#     username: myUser
#     noDuplicateARNs: true

vpc:
  publicAccessCIDRs: ["169.149.229.15/16","0.0.0.0/0"]                  # When using this to restrict endpoint access make sure either privateAcess is true or Nodes IP is whitelisted here else they won't be able to join the cluster.
  clusterEndpoints:
    publicAccess:  true
    privateAccess: true
  nat:
    gateway: true
  
managedNodeGroups:
  - name: ng-1-workers
    availabilityZones: ["ap-south-1b","ap-south-1c"]
    ami: #Add here
    instanceType: t4g.medium
    minSize: 2
    maxSize: 4
    desiredCapacity: 3
    volumeSize: 50
    privateNetworking: true
    propagateASGTags: true
    tags:
      nodegroup-role: worker
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/reboot-private-eks: "owned"
    iam:
      withAddonPolicies:
        externalDNS: true
        certManager: true
        autoScaler: true
        cloudWatch: true
    ssh:
      allow: true
      publicKeyPath: "./ekskey.pub"
      enableSsm: true
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh reboot-private-eks --container-runtime containerd
addons:
- name: vpc-cni
  wellKnownPolicies:


  

